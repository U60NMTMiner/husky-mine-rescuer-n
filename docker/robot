#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
set -x

# robot.sh: runs the main robot container.

disable_rebuild=false
while getopts 'd' OPTION; do
    case "$OPTION" in
        d)
            disable_rebuild=true
            ;;
    esac
done

DIR=../
IMAGE_NAME=carl-main
CONTAINER_NAME=carl-main

# Always run as root.
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# Build the image.
if ! $disable_rebuild; then
    docker build "$DIR" -f "$DIR"/Dockerfile -t $IMAGE_NAME
fi

ip_addr=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')

LOG_FILE="/var/log/rosbags/$(date -Iseconds)"
LOG_DIR="$(dirname "$LOG_FILE")"
mkdir -p "$LOG_DIR"

params=(
    # Detach from the container, and create a fake virtual terminal.
    -dt

    # Use host's network interfaces to listen to ROS, and operate the
    # CAN bus.
    --network=host

    # Allow access to devices.
    --volume=/dev:/dev
    --volume=/media:/media

    # Allow access to writing logs.
    --volume="$LOG_DIR":"$LOG_DIR"

    # Device rules for accessing Realsense cameras.
    --device-cgroup-rule "c 81:* rmw"
    --device-cgroup-rule "c 189:* rmw"
    --device=/dev/ttyUSB0

    # Environmental variables
    -e ROS_MASTER_URI=http://$ip_addr:11311
    -e ROS_IP=$ip_addr
    -e HUSKY_LOGITECH=1
    -e HUSKY_LASER_3D_ENABLED=1
    -e DISPLAY

    # Name the container.
    --name=$CONTAINER_NAME
)

# Clean up the container if it's already running.
docker stop $CONTAINER_NAME || true
docker rm $CONTAINER_NAME || true

# Clean up on ctrl-C.
cleanup () {
    docker stop $CONTAINER_NAME || true
    docker rm $CONTAINER_NAME || true
    exit 1
}
trap cleanup INT

# Set up the ROS core.
docker run "${params[@]}" $IMAGE_NAME roscore
docker exec -d $CONTAINER_NAME /ros_entrypoint.sh rosrun --wait husky_bringup install
docker exec -d $CONTAINER_NAME /ros_entrypoint.sh roslaunch --wait husky_base base.launch 
docker exec -d $CONTAINER_NAME /ros_entrypoint.sh roslaunch velodyne_pointcloud VLP16_points.launch
